// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: kindling_event.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Source int32

const (
	Source_SOURCE_UNKNOWN Source = 0
	Source_SYSCALL_ENTER  Source = 1
	Source_SYSCALL_EXIT   Source = 2
	Source_TRACEPOINT     Source = 3
	Source_KRPOBE         Source = 4
	Source_KRETPROBE      Source = 5
	Source_UPROBE         Source = 6
	Source_URETPROBE      Source = 7
)

// Enum value maps for Source.
var (
	Source_name = map[int32]string{
		0: "SOURCE_UNKNOWN",
		1: "SYSCALL_ENTER",
		2: "SYSCALL_EXIT",
		3: "TRACEPOINT",
		4: "KRPOBE",
		5: "KRETPROBE",
		6: "UPROBE",
		7: "URETPROBE",
	}
	Source_value = map[string]int32{
		"SOURCE_UNKNOWN": 0,
		"SYSCALL_ENTER":  1,
		"SYSCALL_EXIT":   2,
		"TRACEPOINT":     3,
		"KRPOBE":         4,
		"KRETPROBE":      5,
		"UPROBE":         6,
		"URETPROBE":      7,
	}
)

func (x Source) Enum() *Source {
	p := new(Source)
	*p = x
	return p
}

func (x Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Source) Descriptor() protoreflect.EnumDescriptor {
	return file_kindling_event_proto_enumTypes[0].Descriptor()
}

func (Source) Type() protoreflect.EnumType {
	return &file_kindling_event_proto_enumTypes[0]
}

func (x Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Source.Descriptor instead.
func (Source) EnumDescriptor() ([]byte, []int) {
	return file_kindling_event_proto_rawDescGZIP(), []int{0}
}

type Category int32

const (
	Category_CAT_NONE      Category = 0
	Category_CAT_OTHER     Category = 1  // No specific category
	Category_CAT_FILE      Category = 2  // File operations or File I/O
	Category_CAT_NET       Category = 3  // Network operations or network I/O
	Category_CAT_IPC       Category = 4  // IPC operations or IPC I/O
	Category_CAT_WAIT      Category = 5  //
	Category_CAT_SIGNAL    Category = 6  // Signal-related operations (signal)
	Category_CAT_SLEEP     Category = 7  // nanosleep
	Category_CAT_TIME      Category = 8  // Time-related event (e.g. gettimeofday)
	Category_CAT_PROCESS   Category = 9  // Process-related event (e.g. fork, clone,
	Category_CAT_SCHEDULER Category = 10 // Scheduler event (context switch)
	Category_CAT_MEMORY    Category = 11 // Memory-related operations (e.g. brk, mmap, unmap)
	Category_CAT_USER      Category = 12 // User-related operations (e.g. getuid, setgid)
	Category_CAT_SYSTEM    Category = 13 // System-related operations (e.g. reboot)
)

// Enum value maps for Category.
var (
	Category_name = map[int32]string{
		0:  "CAT_NONE",
		1:  "CAT_OTHER",
		2:  "CAT_FILE",
		3:  "CAT_NET",
		4:  "CAT_IPC",
		5:  "CAT_WAIT",
		6:  "CAT_SIGNAL",
		7:  "CAT_SLEEP",
		8:  "CAT_TIME",
		9:  "CAT_PROCESS",
		10: "CAT_SCHEDULER",
		11: "CAT_MEMORY",
		12: "CAT_USER",
		13: "CAT_SYSTEM",
	}
	Category_value = map[string]int32{
		"CAT_NONE":      0,
		"CAT_OTHER":     1,
		"CAT_FILE":      2,
		"CAT_NET":       3,
		"CAT_IPC":       4,
		"CAT_WAIT":      5,
		"CAT_SIGNAL":    6,
		"CAT_SLEEP":     7,
		"CAT_TIME":      8,
		"CAT_PROCESS":   9,
		"CAT_SCHEDULER": 10,
		"CAT_MEMORY":    11,
		"CAT_USER":      12,
		"CAT_SYSTEM":    13,
	}
)

func (x Category) Enum() *Category {
	p := new(Category)
	*p = x
	return p
}

func (x Category) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Category) Descriptor() protoreflect.EnumDescriptor {
	return file_kindling_event_proto_enumTypes[1].Descriptor()
}

func (Category) Type() protoreflect.EnumType {
	return &file_kindling_event_proto_enumTypes[1]
}

func (x Category) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Category.Descriptor instead.
func (Category) EnumDescriptor() ([]byte, []int) {
	return file_kindling_event_proto_rawDescGZIP(), []int{1}
}

type ValueType int32

const (
	ValueType_NONE    ValueType = 0
	ValueType_INT8    ValueType = 1  // 1 byte
	ValueType_INT16   ValueType = 2  // 2 bytes
	ValueType_INT32   ValueType = 3  // 4 bytes
	ValueType_INT64   ValueType = 4  // 8 bytes
	ValueType_UINT8   ValueType = 5  // 1 byte
	ValueType_UINT16  ValueType = 6  // 2 bytes
	ValueType_UINT32  ValueType = 7  // 4 bytes
	ValueType_UINT64  ValueType = 8  // 8 bytes
	ValueType_CHARBUF ValueType = 9  // bytes, NULL terminated
	ValueType_BYTEBUF ValueType = 10 // bytes
	ValueType_FLOAT   ValueType = 11 // 4 bytes
	ValueType_DOUBLE  ValueType = 12 // 8 bytes
	ValueType_BOOL    ValueType = 13 // 4 bytes
)

// Enum value maps for ValueType.
var (
	ValueType_name = map[int32]string{
		0:  "NONE",
		1:  "INT8",
		2:  "INT16",
		3:  "INT32",
		4:  "INT64",
		5:  "UINT8",
		6:  "UINT16",
		7:  "UINT32",
		8:  "UINT64",
		9:  "CHARBUF",
		10: "BYTEBUF",
		11: "FLOAT",
		12: "DOUBLE",
		13: "BOOL",
	}
	ValueType_value = map[string]int32{
		"NONE":    0,
		"INT8":    1,
		"INT16":   2,
		"INT32":   3,
		"INT64":   4,
		"UINT8":   5,
		"UINT16":  6,
		"UINT32":  7,
		"UINT64":  8,
		"CHARBUF": 9,
		"BYTEBUF": 10,
		"FLOAT":   11,
		"DOUBLE":  12,
		"BOOL":    13,
	}
)

func (x ValueType) Enum() *ValueType {
	p := new(ValueType)
	*p = x
	return p
}

func (x ValueType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ValueType) Descriptor() protoreflect.EnumDescriptor {
	return file_kindling_event_proto_enumTypes[2].Descriptor()
}

func (ValueType) Type() protoreflect.EnumType {
	return &file_kindling_event_proto_enumTypes[2]
}

func (x ValueType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ValueType.Descriptor instead.
func (ValueType) EnumDescriptor() ([]byte, []int) {
	return file_kindling_event_proto_rawDescGZIP(), []int{2}
}

// File Descriptor type
type FDType int32

const (
	FDType_FD_UNKNOWN       FDType = 0
	FDType_FD_FILE          FDType = 1
	FDType_FD_DIRECTORY     FDType = 2
	FDType_FD_IPV4_SOCK     FDType = 3
	FDType_FD_IPV6_SOCK     FDType = 4
	FDType_FD_IPV4_SERVSOCK FDType = 5
	FDType_FD_IPV6_SERVSOCK FDType = 6
	FDType_FD_FIFO          FDType = 7
	FDType_FD_UNIX_SOCK     FDType = 8
	FDType_FD_EVENT         FDType = 9
	FDType_FD_UNSUPPORTED   FDType = 10 // TODO
	FDType_FD_SIGNALFD      FDType = 11
	FDType_FD_EVENTPOLL     FDType = 12
	FDType_FD_INOTIFY       FDType = 13
	FDType_FD_TIMERFD       FDType = 14
	FDType_FD_NETLINK       FDType = 15
	FDType_FD_FILE_V2       FDType = 16
)

// Enum value maps for FDType.
var (
	FDType_name = map[int32]string{
		0:  "FD_UNKNOWN",
		1:  "FD_FILE",
		2:  "FD_DIRECTORY",
		3:  "FD_IPV4_SOCK",
		4:  "FD_IPV6_SOCK",
		5:  "FD_IPV4_SERVSOCK",
		6:  "FD_IPV6_SERVSOCK",
		7:  "FD_FIFO",
		8:  "FD_UNIX_SOCK",
		9:  "FD_EVENT",
		10: "FD_UNSUPPORTED",
		11: "FD_SIGNALFD",
		12: "FD_EVENTPOLL",
		13: "FD_INOTIFY",
		14: "FD_TIMERFD",
		15: "FD_NETLINK",
		16: "FD_FILE_V2",
	}
	FDType_value = map[string]int32{
		"FD_UNKNOWN":       0,
		"FD_FILE":          1,
		"FD_DIRECTORY":     2,
		"FD_IPV4_SOCK":     3,
		"FD_IPV6_SOCK":     4,
		"FD_IPV4_SERVSOCK": 5,
		"FD_IPV6_SERVSOCK": 6,
		"FD_FIFO":          7,
		"FD_UNIX_SOCK":     8,
		"FD_EVENT":         9,
		"FD_UNSUPPORTED":   10,
		"FD_SIGNALFD":      11,
		"FD_EVENTPOLL":     12,
		"FD_INOTIFY":       13,
		"FD_TIMERFD":       14,
		"FD_NETLINK":       15,
		"FD_FILE_V2":       16,
	}
)

func (x FDType) Enum() *FDType {
	p := new(FDType)
	*p = x
	return p
}

func (x FDType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FDType) Descriptor() protoreflect.EnumDescriptor {
	return file_kindling_event_proto_enumTypes[3].Descriptor()
}

func (FDType) Type() protoreflect.EnumType {
	return &file_kindling_event_proto_enumTypes[3]
}

func (x FDType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FDType.Descriptor instead.
func (FDType) EnumDescriptor() ([]byte, []int) {
	return file_kindling_event_proto_rawDescGZIP(), []int{3}
}

type L4Proto int32

const (
	L4Proto_UNKNOWN L4Proto = 0
	L4Proto_TCP     L4Proto = 1
	L4Proto_UDP     L4Proto = 2
	L4Proto_ICMP    L4Proto = 3
	L4Proto_RAW     L4Proto = 4
)

// Enum value maps for L4Proto.
var (
	L4Proto_name = map[int32]string{
		0: "UNKNOWN",
		1: "TCP",
		2: "UDP",
		3: "ICMP",
		4: "RAW",
	}
	L4Proto_value = map[string]int32{
		"UNKNOWN": 0,
		"TCP":     1,
		"UDP":     2,
		"ICMP":    3,
		"RAW":     4,
	}
)

func (x L4Proto) Enum() *L4Proto {
	p := new(L4Proto)
	*p = x
	return p
}

func (x L4Proto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (L4Proto) Descriptor() protoreflect.EnumDescriptor {
	return file_kindling_event_proto_enumTypes[4].Descriptor()
}

func (L4Proto) Type() protoreflect.EnumType {
	return &file_kindling_event_proto_enumTypes[4]
}

func (x L4Proto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use L4Proto.Descriptor instead.
func (L4Proto) EnumDescriptor() ([]byte, []int) {
	return file_kindling_event_proto_rawDescGZIP(), []int{4}
}

type KindlingEventList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KindlingEventList []*KindlingEvent `protobuf:"bytes,1,rep,name=kindling_event_list,json=kindlingEventList,proto3" json:"kindling_event_list,omitempty"`
}

func (x *KindlingEventList) Reset() {
	*x = KindlingEventList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kindling_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KindlingEventList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KindlingEventList) ProtoMessage() {}

func (x *KindlingEventList) ProtoReflect() protoreflect.Message {
	mi := &file_kindling_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KindlingEventList.ProtoReflect.Descriptor instead.
func (*KindlingEventList) Descriptor() ([]byte, []int) {
	return file_kindling_event_proto_rawDescGZIP(), []int{0}
}

func (x *KindlingEventList) GetKindlingEventList() []*KindlingEvent {
	if x != nil {
		return x.KindlingEventList
	}
	return nil
}

type KindlingEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source Source `protobuf:"varint,1,opt,name=source,proto3,enum=kindling.Source" json:"source,omitempty"`
	// Timestamp in nanoseconds at which the event were collected.
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Name of Kindling Event
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// Category of Kindling Event, enum
	Category Category `protobuf:"varint,4,opt,name=category,proto3,enum=kindling.Category" json:"category,omitempty"`
	// Native attributes of hook point, including arguments or return value.
	NativeAttributes *Property `protobuf:"bytes,5,opt,name=Native_attributes,json=NativeAttributes,proto3" json:"Native_attributes,omitempty"`
	// User-defined Attributions of Kindling Event, now including latency for syscall.
	UserAttributes []*KeyValue `protobuf:"bytes,6,rep,name=user_attributes,json=userAttributes,proto3" json:"user_attributes,omitempty"`
	// Context includes Thread information and Fd information.
	Ctx *Context `protobuf:"bytes,7,opt,name=ctx,proto3" json:"ctx,omitempty"`
}

func (x *KindlingEvent) Reset() {
	*x = KindlingEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kindling_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KindlingEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KindlingEvent) ProtoMessage() {}

func (x *KindlingEvent) ProtoReflect() protoreflect.Message {
	mi := &file_kindling_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KindlingEvent.ProtoReflect.Descriptor instead.
func (*KindlingEvent) Descriptor() ([]byte, []int) {
	return file_kindling_event_proto_rawDescGZIP(), []int{1}
}

func (x *KindlingEvent) GetSource() Source {
	if x != nil {
		return x.Source
	}
	return Source_SOURCE_UNKNOWN
}

func (x *KindlingEvent) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *KindlingEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KindlingEvent) GetCategory() Category {
	if x != nil {
		return x.Category
	}
	return Category_CAT_NONE
}

func (x *KindlingEvent) GetNativeAttributes() *Property {
	if x != nil {
		return x.NativeAttributes
	}
	return nil
}

func (x *KindlingEvent) GetUserAttributes() []*KeyValue {
	if x != nil {
		return x.UserAttributes
	}
	return nil
}

func (x *KindlingEvent) GetCtx() *Context {
	if x != nil {
		return x.Ctx
	}
	return nil
}

type AnyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Value:
	//	*AnyValue_StringValue
	//	*AnyValue_BoolValue
	//	*AnyValue_IntValue
	//	*AnyValue_UintValue
	//	*AnyValue_DoubleValue
	//	*AnyValue_BytesValue
	//	*AnyValue_ArrayValue
	Value isAnyValue_Value `protobuf_oneof:"value"`
}

func (x *AnyValue) Reset() {
	*x = AnyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kindling_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyValue) ProtoMessage() {}

func (x *AnyValue) ProtoReflect() protoreflect.Message {
	mi := &file_kindling_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyValue.ProtoReflect.Descriptor instead.
func (*AnyValue) Descriptor() ([]byte, []int) {
	return file_kindling_event_proto_rawDescGZIP(), []int{2}
}

func (m *AnyValue) GetValue() isAnyValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *AnyValue) GetStringValue() string {
	if x, ok := x.GetValue().(*AnyValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *AnyValue) GetBoolValue() bool {
	if x, ok := x.GetValue().(*AnyValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *AnyValue) GetIntValue() int64 {
	if x, ok := x.GetValue().(*AnyValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *AnyValue) GetUintValue() uint64 {
	if x, ok := x.GetValue().(*AnyValue_UintValue); ok {
		return x.UintValue
	}
	return 0
}

func (x *AnyValue) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*AnyValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *AnyValue) GetBytesValue() []byte {
	if x, ok := x.GetValue().(*AnyValue_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

func (x *AnyValue) GetArrayValue() *ArrayValue {
	if x, ok := x.GetValue().(*AnyValue_ArrayValue); ok {
		return x.ArrayValue
	}
	return nil
}

type isAnyValue_Value interface {
	isAnyValue_Value()
}

type AnyValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type AnyValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type AnyValue_IntValue struct {
	IntValue int64 `protobuf:"varint,3,opt,name=int_value,json=intValue,proto3,oneof"`
}

type AnyValue_UintValue struct {
	UintValue uint64 `protobuf:"varint,4,opt,name=uint_value,json=uintValue,proto3,oneof"`
}

type AnyValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,5,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type AnyValue_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,6,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}

type AnyValue_ArrayValue struct {
	ArrayValue *ArrayValue `protobuf:"bytes,7,opt,name=array_value,json=arrayValue,proto3,oneof"`
}

func (*AnyValue_StringValue) isAnyValue_Value() {}

func (*AnyValue_BoolValue) isAnyValue_Value() {}

func (*AnyValue_IntValue) isAnyValue_Value() {}

func (*AnyValue_UintValue) isAnyValue_Value() {}

func (*AnyValue_DoubleValue) isAnyValue_Value() {}

func (*AnyValue_BytesValue) isAnyValue_Value() {}

func (*AnyValue_ArrayValue) isAnyValue_Value() {}

type ArrayValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values []*AnyValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ArrayValue) Reset() {
	*x = ArrayValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kindling_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrayValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayValue) ProtoMessage() {}

func (x *ArrayValue) ProtoReflect() protoreflect.Message {
	mi := &file_kindling_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayValue.ProtoReflect.Descriptor instead.
func (*ArrayValue) Descriptor() ([]byte, []int) {
	return file_kindling_event_proto_rawDescGZIP(), []int{3}
}

func (x *ArrayValue) GetValues() []*AnyValue {
	if x != nil {
		return x.Values
	}
	return nil
}

type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *AnyValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kindling_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_kindling_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_kindling_event_proto_rawDescGZIP(), []int{4}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() *AnyValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type Property struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If type of syscall_enter, kprobe, uprobe, tracepoint
	Args []*KeyValue `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
	// If type of syscall_exit, kretprobe, uretprobe
	Ret []*KeyValue `protobuf:"bytes,2,rep,name=ret,proto3" json:"ret,omitempty"`
}

func (x *Property) Reset() {
	*x = Property{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kindling_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Property) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Property) ProtoMessage() {}

func (x *Property) ProtoReflect() protoreflect.Message {
	mi := &file_kindling_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Property.ProtoReflect.Descriptor instead.
func (*Property) Descriptor() ([]byte, []int) {
	return file_kindling_event_proto_rawDescGZIP(), []int{5}
}

func (x *Property) GetArgs() []*KeyValue {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *Property) GetRet() []*KeyValue {
	if x != nil {
		return x.Ret
	}
	return nil
}

type Pair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Arguments' Name or Attributions' Name.
	Key string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	// Type of Value.
	ValueType ValueType `protobuf:"varint,2,opt,name=value_type,json=valueType,proto3,enum=kindling.ValueType" json:"value_type,omitempty"`
	// Value of Key in bytes, should be converted according to ValueType.
	Value []byte `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Pair) Reset() {
	*x = Pair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kindling_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pair) ProtoMessage() {}

func (x *Pair) ProtoReflect() protoreflect.Message {
	mi := &file_kindling_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pair.ProtoReflect.Descriptor instead.
func (*Pair) Descriptor() ([]byte, []int) {
	return file_kindling_event_proto_rawDescGZIP(), []int{6}
}

func (x *Pair) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Pair) GetValueType() ValueType {
	if x != nil {
		return x.ValueType
	}
	return ValueType_NONE
}

func (x *Pair) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type Context struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Thread information corresponding to Kindling Event, optional.
	ThreadInfo *Thread `protobuf:"bytes,1,opt,name=thread_info,json=threadInfo,proto3" json:"thread_info,omitempty"`
	// Fd information corresponding to Kindling Event, optional.
	FdInfo *Fd `protobuf:"bytes,2,opt,name=fd_info,json=fdInfo,proto3" json:"fd_info,omitempty"`
}

func (x *Context) Reset() {
	*x = Context{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kindling_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Context) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Context) ProtoMessage() {}

func (x *Context) ProtoReflect() protoreflect.Message {
	mi := &file_kindling_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Context.ProtoReflect.Descriptor instead.
func (*Context) Descriptor() ([]byte, []int) {
	return file_kindling_event_proto_rawDescGZIP(), []int{7}
}

func (x *Context) GetThreadInfo() *Thread {
	if x != nil {
		return x.ThreadInfo
	}
	return nil
}

func (x *Context) GetFdInfo() *Fd {
	if x != nil {
		return x.FdInfo
	}
	return nil
}

type Thread struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Process id of thread.
	Pid uint32 `protobuf:"varint,1,opt,name=pid,proto3" json:"pid,omitempty"`
	// Thread/task id of thread.
	Tid uint32 `protobuf:"varint,2,opt,name=tid,proto3" json:"tid,omitempty"`
	// User id of thread
	Uid uint32 `protobuf:"varint,3,opt,name=uid,proto3" json:"uid,omitempty"`
	// Group id of thread
	Gid uint32 `protobuf:"varint,4,opt,name=gid,proto3" json:"gid,omitempty"`
	// Command of thread.
	Comm string `protobuf:"bytes,5,opt,name=comm,proto3" json:"comm,omitempty"`
	// ContainerId of thread
	ContainerId string `protobuf:"bytes,6,opt,name=container_id,json=containerId,proto3" json:"container_id,omitempty"`
	// ContainerName of thread
	ContainerName string `protobuf:"bytes,7,opt,name=container_name,json=containerName,proto3" json:"container_name,omitempty"`
}

func (x *Thread) Reset() {
	*x = Thread{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kindling_event_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Thread) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Thread) ProtoMessage() {}

func (x *Thread) ProtoReflect() protoreflect.Message {
	mi := &file_kindling_event_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Thread.ProtoReflect.Descriptor instead.
func (*Thread) Descriptor() ([]byte, []int) {
	return file_kindling_event_proto_rawDescGZIP(), []int{8}
}

func (x *Thread) GetPid() uint32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *Thread) GetTid() uint32 {
	if x != nil {
		return x.Tid
	}
	return 0
}

func (x *Thread) GetUid() uint32 {
	if x != nil {
		return x.Uid
	}
	return 0
}

func (x *Thread) GetGid() uint32 {
	if x != nil {
		return x.Gid
	}
	return 0
}

func (x *Thread) GetComm() string {
	if x != nil {
		return x.Comm
	}
	return ""
}

func (x *Thread) GetContainerId() string {
	if x != nil {
		return x.ContainerId
	}
	return ""
}

func (x *Thread) GetContainerName() string {
	if x != nil {
		return x.ContainerName
	}
	return ""
}

type Fd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// FD number.
	Num int32 `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	// Type of FD in enum.
	TypeFd FDType `protobuf:"varint,2,opt,name=type_fd,json=typeFd,proto3,enum=kindling.FDType" json:"type_fd,omitempty"`
	// if FD is type of file
	Filename  string `protobuf:"bytes,3,opt,name=filename,proto3" json:"filename,omitempty"`
	Directory string `protobuf:"bytes,4,opt,name=directory,proto3" json:"directory,omitempty"`
	// if FD is type of ipv4 or ipv6
	Protocol L4Proto `protobuf:"varint,5,opt,name=protocol,proto3,enum=kindling.L4Proto" json:"protocol,omitempty"`
	// repeated for ipv6, client_ip[0] for ipv4
	Role  bool     `protobuf:"varint,6,opt,name=role,proto3" json:"role,omitempty"`
	Sip   []uint32 `protobuf:"varint,7,rep,packed,name=sip,proto3" json:"sip,omitempty"`
	Dip   []uint32 `protobuf:"varint,8,rep,packed,name=dip,proto3" json:"dip,omitempty"`
	Sport uint32   `protobuf:"varint,9,opt,name=sport,proto3" json:"sport,omitempty"`
	Dport uint32   `protobuf:"varint,10,opt,name=dport,proto3" json:"dport,omitempty"`
	// if FD is type of unix_sock
	// Source socket endpoint
	Source uint64 `protobuf:"varint,11,opt,name=source,proto3" json:"source,omitempty"`
	// Destination socket endpoint
	Destination uint64 `protobuf:"varint,12,opt,name=destination,proto3" json:"destination,omitempty"`
}

func (x *Fd) Reset() {
	*x = Fd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_kindling_event_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fd) ProtoMessage() {}

func (x *Fd) ProtoReflect() protoreflect.Message {
	mi := &file_kindling_event_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fd.ProtoReflect.Descriptor instead.
func (*Fd) Descriptor() ([]byte, []int) {
	return file_kindling_event_proto_rawDescGZIP(), []int{9}
}

func (x *Fd) GetNum() int32 {
	if x != nil {
		return x.Num
	}
	return 0
}

func (x *Fd) GetTypeFd() FDType {
	if x != nil {
		return x.TypeFd
	}
	return FDType_FD_UNKNOWN
}

func (x *Fd) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *Fd) GetDirectory() string {
	if x != nil {
		return x.Directory
	}
	return ""
}

func (x *Fd) GetProtocol() L4Proto {
	if x != nil {
		return x.Protocol
	}
	return L4Proto_UNKNOWN
}

func (x *Fd) GetRole() bool {
	if x != nil {
		return x.Role
	}
	return false
}

func (x *Fd) GetSip() []uint32 {
	if x != nil {
		return x.Sip
	}
	return nil
}

func (x *Fd) GetDip() []uint32 {
	if x != nil {
		return x.Dip
	}
	return nil
}

func (x *Fd) GetSport() uint32 {
	if x != nil {
		return x.Sport
	}
	return 0
}

func (x *Fd) GetDport() uint32 {
	if x != nil {
		return x.Dport
	}
	return 0
}

func (x *Fd) GetSource() uint64 {
	if x != nil {
		return x.Source
	}
	return 0
}

func (x *Fd) GetDestination() uint64 {
	if x != nil {
		return x.Destination
	}
	return 0
}

var File_kindling_event_proto protoreflect.FileDescriptor

var file_kindling_event_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6b, 0x69, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x6b, 0x69, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67,
	0x22, 0x5c, 0x0a, 0x11, 0x4b, 0x69, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x13, 0x6b, 0x69, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x69, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4b, 0x69,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x11, 0x6b, 0x69, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xbe,
	0x02, 0x0a, 0x0d, 0x4b, 0x69, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x6b, 0x69, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x12,
	0x2e, 0x6b, 0x69, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x11,
	0x4e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x69, 0x6e, 0x64, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x10, 0x4e, 0x61, 0x74,
	0x69, 0x76, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x3b, 0x0a,
	0x0f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x69, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x75, 0x73, 0x65, 0x72,
	0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x23, 0x0a, 0x03, 0x63, 0x74,
	0x78, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x69, 0x6e, 0x64, 0x6c, 0x69,
	0x6e, 0x67, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x03, 0x63, 0x74, 0x78, 0x22,
	0x9a, 0x02, 0x0a, 0x08, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x75, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x04, 0x48, 0x00, 0x52, 0x09, 0x75, 0x69, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x0a,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x37, 0x0a, 0x0b, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x6b, 0x69, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x48, 0x00, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x38, 0x0a, 0x0a,
	0x41, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x69, 0x6e,
	0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x46, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x69, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x41,
	0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x58,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x26, 0x0a, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x69, 0x6e, 0x64, 0x6c,
	0x69, 0x6e, 0x67, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x12, 0x24, 0x0a, 0x03, 0x72, 0x65, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6b, 0x69, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x72, 0x65, 0x74, 0x22, 0x62, 0x0a, 0x04, 0x50, 0x61, 0x69, 0x72,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x32, 0x0a, 0x0a, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6b, 0x69, 0x6e, 0x64, 0x6c, 0x69, 0x6e,
	0x67, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x63, 0x0a, 0x07,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x74, 0x68, 0x72, 0x65, 0x61,
	0x64, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b,
	0x69, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x52, 0x0a,
	0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x25, 0x0a, 0x07, 0x66, 0x64,
	0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6b, 0x69,
	0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x64, 0x52, 0x06, 0x66, 0x64, 0x49, 0x6e, 0x66,
	0x6f, 0x22, 0xae, 0x01, 0x0a, 0x06, 0x54, 0x68, 0x72, 0x65, 0x61, 0x64, 0x12, 0x10, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x74, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x74, 0x69, 0x64,
	0x12, 0x10, 0x0a, 0x03, 0x75, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x75,
	0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x03, 0x67, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x6d, 0x6d, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x74,
	0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x63,
	0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0xc8, 0x02, 0x0a, 0x02, 0x46, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x75, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6e, 0x75, 0x6d, 0x12, 0x29, 0x0a, 0x07, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x66, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6b,
	0x69, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x46, 0x44, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x74, 0x79, 0x70, 0x65, 0x46, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x2d, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x11, 0x2e, 0x6b, 0x69, 0x6e, 0x64, 0x6c, 0x69, 0x6e, 0x67, 0x2e, 0x4c, 0x34,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x72,
	0x6f, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x69, 0x70, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x03, 0x73, 0x69, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x69, 0x70, 0x18, 0x08, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x03, 0x64, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x64, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x64, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0x87, 0x01,
	0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x4f, 0x55, 0x52,
	0x43, 0x45, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x53, 0x59, 0x53, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x4e, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12,
	0x10, 0x0a, 0x0c, 0x53, 0x59, 0x53, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x10,
	0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x52, 0x41, 0x43, 0x45, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x52, 0x50, 0x4f, 0x42, 0x45, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x4b, 0x52, 0x45, 0x54, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06,
	0x55, 0x50, 0x52, 0x4f, 0x42, 0x45, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x52, 0x45, 0x54,
	0x50, 0x52, 0x4f, 0x42, 0x45, 0x10, 0x07, 0x2a, 0xdc, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x45,
	0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x54, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x54, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x41, 0x54, 0x5f, 0x4e, 0x45, 0x54, 0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07,
	0x43, 0x41, 0x54, 0x5f, 0x49, 0x50, 0x43, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x54,
	0x5f, 0x57, 0x41, 0x49, 0x54, 0x10, 0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x54, 0x5f, 0x53,
	0x49, 0x47, 0x4e, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x54, 0x5f, 0x53,
	0x4c, 0x45, 0x45, 0x50, 0x10, 0x07, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x54, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x10, 0x08, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x41, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43,
	0x45, 0x53, 0x53, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x41, 0x54, 0x5f, 0x53, 0x43, 0x48,
	0x45, 0x44, 0x55, 0x4c, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x54, 0x5f,
	0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x0b, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x41, 0x54, 0x5f,
	0x55, 0x53, 0x45, 0x52, 0x10, 0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x41, 0x54, 0x5f, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x10, 0x0d, 0x2a, 0xaa, 0x01, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x49, 0x4e, 0x54, 0x38, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x31,
	0x36, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x03, 0x12, 0x09,
	0x0a, 0x05, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x55, 0x49, 0x4e,
	0x54, 0x38, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x31, 0x36, 0x10, 0x06,
	0x12, 0x0a, 0x0a, 0x06, 0x55, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06,
	0x55, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x48, 0x41, 0x52,
	0x42, 0x55, 0x46, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x59, 0x54, 0x45, 0x42, 0x55, 0x46,
	0x10, 0x0a, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x10, 0x0b, 0x12, 0x0a, 0x0a,
	0x06, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f,
	0x4c, 0x10, 0x0d, 0x2a, 0xab, 0x02, 0x0a, 0x06, 0x46, 0x44, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e,
	0x0a, 0x0a, 0x46, 0x44, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b,
	0x0a, 0x07, 0x46, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x46,
	0x44, 0x5f, 0x44, 0x49, 0x52, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x59, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x46, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x10, 0x03, 0x12,
	0x10, 0x0a, 0x0c, 0x46, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x36, 0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x10,
	0x04, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x44, 0x5f, 0x49, 0x50, 0x56, 0x34, 0x5f, 0x53, 0x45, 0x52,
	0x56, 0x53, 0x4f, 0x43, 0x4b, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x44, 0x5f, 0x49, 0x50,
	0x56, 0x36, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x53, 0x4f, 0x43, 0x4b, 0x10, 0x06, 0x12, 0x0b, 0x0a,
	0x07, 0x46, 0x44, 0x5f, 0x46, 0x49, 0x46, 0x4f, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x46, 0x44,
	0x5f, 0x55, 0x4e, 0x49, 0x58, 0x5f, 0x53, 0x4f, 0x43, 0x4b, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08,
	0x46, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x10, 0x09, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x44,
	0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0a, 0x12, 0x0f,
	0x0a, 0x0b, 0x46, 0x44, 0x5f, 0x53, 0x49, 0x47, 0x4e, 0x41, 0x4c, 0x46, 0x44, 0x10, 0x0b, 0x12,
	0x10, 0x0a, 0x0c, 0x46, 0x44, 0x5f, 0x45, 0x56, 0x45, 0x4e, 0x54, 0x50, 0x4f, 0x4c, 0x4c, 0x10,
	0x0c, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x44, 0x5f, 0x49, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x59, 0x10,
	0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x52, 0x46, 0x44, 0x10,
	0x0e, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x44, 0x5f, 0x4e, 0x45, 0x54, 0x4c, 0x49, 0x4e, 0x4b, 0x10,
	0x0f, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x44, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x56, 0x32, 0x10,
	0x10, 0x2a, 0x3b, 0x0a, 0x07, 0x4c, 0x34, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x54, 0x43, 0x50,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x55, 0x44, 0x50, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x49,
	0x43, 0x4d, 0x50, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x41, 0x57, 0x10, 0x04, 0x42, 0x0d,
	0x5a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_kindling_event_proto_rawDescOnce sync.Once
	file_kindling_event_proto_rawDescData = file_kindling_event_proto_rawDesc
)

func file_kindling_event_proto_rawDescGZIP() []byte {
	file_kindling_event_proto_rawDescOnce.Do(func() {
		file_kindling_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_kindling_event_proto_rawDescData)
	})
	return file_kindling_event_proto_rawDescData
}

var file_kindling_event_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_kindling_event_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_kindling_event_proto_goTypes = []interface{}{
	(Source)(0),               // 0: kindling.Source
	(Category)(0),             // 1: kindling.Category
	(ValueType)(0),            // 2: kindling.ValueType
	(FDType)(0),               // 3: kindling.FDType
	(L4Proto)(0),              // 4: kindling.L4Proto
	(*KindlingEventList)(nil), // 5: kindling.KindlingEventList
	(*KindlingEvent)(nil),     // 6: kindling.KindlingEvent
	(*AnyValue)(nil),          // 7: kindling.AnyValue
	(*ArrayValue)(nil),        // 8: kindling.ArrayValue
	(*KeyValue)(nil),          // 9: kindling.KeyValue
	(*Property)(nil),          // 10: kindling.Property
	(*Pair)(nil),              // 11: kindling.Pair
	(*Context)(nil),           // 12: kindling.Context
	(*Thread)(nil),            // 13: kindling.Thread
	(*Fd)(nil),                // 14: kindling.Fd
}
var file_kindling_event_proto_depIdxs = []int32{
	6,  // 0: kindling.KindlingEventList.kindling_event_list:type_name -> kindling.KindlingEvent
	0,  // 1: kindling.KindlingEvent.source:type_name -> kindling.Source
	1,  // 2: kindling.KindlingEvent.category:type_name -> kindling.Category
	10, // 3: kindling.KindlingEvent.Native_attributes:type_name -> kindling.Property
	9,  // 4: kindling.KindlingEvent.user_attributes:type_name -> kindling.KeyValue
	12, // 5: kindling.KindlingEvent.ctx:type_name -> kindling.Context
	8,  // 6: kindling.AnyValue.array_value:type_name -> kindling.ArrayValue
	7,  // 7: kindling.ArrayValue.values:type_name -> kindling.AnyValue
	7,  // 8: kindling.KeyValue.value:type_name -> kindling.AnyValue
	9,  // 9: kindling.Property.args:type_name -> kindling.KeyValue
	9,  // 10: kindling.Property.ret:type_name -> kindling.KeyValue
	2,  // 11: kindling.Pair.value_type:type_name -> kindling.ValueType
	13, // 12: kindling.Context.thread_info:type_name -> kindling.Thread
	14, // 13: kindling.Context.fd_info:type_name -> kindling.Fd
	3,  // 14: kindling.Fd.type_fd:type_name -> kindling.FDType
	4,  // 15: kindling.Fd.protocol:type_name -> kindling.L4Proto
	16, // [16:16] is the sub-list for method output_type
	16, // [16:16] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_kindling_event_proto_init() }
func file_kindling_event_proto_init() {
	if File_kindling_event_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_kindling_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KindlingEventList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kindling_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KindlingEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kindling_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kindling_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrayValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kindling_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kindling_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Property); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kindling_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kindling_event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Context); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kindling_event_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Thread); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_kindling_event_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_kindling_event_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*AnyValue_StringValue)(nil),
		(*AnyValue_BoolValue)(nil),
		(*AnyValue_IntValue)(nil),
		(*AnyValue_UintValue)(nil),
		(*AnyValue_DoubleValue)(nil),
		(*AnyValue_BytesValue)(nil),
		(*AnyValue_ArrayValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_kindling_event_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_kindling_event_proto_goTypes,
		DependencyIndexes: file_kindling_event_proto_depIdxs,
		EnumInfos:         file_kindling_event_proto_enumTypes,
		MessageInfos:      file_kindling_event_proto_msgTypes,
	}.Build()
	File_kindling_event_proto = out.File
	file_kindling_event_proto_rawDesc = nil
	file_kindling_event_proto_goTypes = nil
	file_kindling_event_proto_depIdxs = nil
}
